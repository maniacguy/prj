import geopandas as gpd
import pandas as pd
import pg8000

# H√†m k·∫øt n·ªëi ƒë·∫øn PostgreSQL
def connect():
    try:
        conn = pg8000.connect(**db_config)
        print("‚úÖ K·∫øt n·ªëi ƒë·∫øn PostgreSQL th√†nh c√¥ng!")
        return conn
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
        return None

# H√†m t·∫°o b·∫£ng 'schools' trong PostgreSQL
def create_schools_table(conn):
    create_table_query = """
    CREATE TABLE IF NOT EXISTS schools (
        USE_ID INT PRIMARY KEY,
        CATCH_TYPE VARCHAR(255),
        USE_DESC VARCHAR(255),
        ADD_DATE DATE,
        KINDERGART VARCHAR(255),
        YEAR1 VARCHAR(255),
        YEAR2 VARCHAR(255),
        YEAR3 VARCHAR(255),
        YEAR4 VARCHAR(255),
        YEAR5 VARCHAR(255),
        YEAR6 VARCHAR(255),
        YEAR7 VARCHAR(255),
        YEAR8 VARCHAR(255),
        YEAR9 VARCHAR(255),
        YEAR10 VARCHAR(255),
        YEAR11 VARCHAR(255),
        YEAR12 VARCHAR(255),
        PRIORITY VARCHAR(255),
        level VARCHAR(50),
        geometry GEOMETRY(MultiPolygon, 4326)
    );
    """
    try:
        with conn.cursor() as cur:
            cur.execute(create_table_query)
            conn.commit()
            print("‚úÖ T·∫°o b·∫£ng 'schools' th√†nh c√¥ng!")
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o b·∫£ng: {e}")
        conn.rollback()

# ƒê·ªçc d·ªØ li·ªáu t·ª´ c√°c shapefile
def read_and_combine_shapefiles():
    print("üåç ƒêang x·ª≠ l√Ω v√† k·∫øt h·ª£p d·ªØ li·ªáu t·ª´ c√°c shapefiles...")
    
    # ƒê·ªçc c√°c shapefiles v√† th√™m c·ªôt 'level' ƒë·ªÉ ph√¢n bi·ªát
    gdf_future = gpd.read_file("data/Catchments/catchments/catchments_future.shp", engine="pyogrio")
    gdf_future['level'] = 'future'
    
    gdf_primary = gpd.read_file("data/Catchments/catchments/catchments_primary.shp", engine="pyogrio")
    gdf_primary['level'] = 'primary'
    
    gdf_secondary = gpd.read_file("data/Catchments/catchments/catchments_secondary.shp", engine="pyogrio")
    gdf_secondary['level'] = 'secondary'
    
    # K·∫øt h·ª£p t·∫•t c·∫£ GeoDataFrame
    combined_gdf = pd.concat([gdf_future, gdf_primary, gdf_secondary], ignore_index=True)
    
    # Lo·∫°i b·ªè c√°c b·∫£n ghi tr√πng USE_ID
    combined_gdf = combined_gdf.drop_duplicates(subset=['USE_ID'])
    
    print("‚úÖ ƒê√£ k·∫øt h·ª£p v√† l√†m s·∫°ch d·ªØ li·ªáu t·ª´ c√°c shapefiles!")
    
    return combined_gdf

# Ch√®n d·ªØ li·ªáu v√†o b·∫£ng 'schools' v·ªõi x·ª≠ l√Ω tr√πng kh√≥a ch√≠nh
def insert_data_into_schools(conn, gdf):
    try:
        with conn.cursor() as cur:
            # S·ª≠ d·ª•ng UPSERT ƒë·ªÉ x·ª≠ l√Ω tr√πng kh√≥a ch√≠nh
            insert_query = """
            INSERT INTO schools (USE_ID, CATCH_TYPE, USE_DESC, ADD_DATE, KINDERGART, YEAR1, YEAR2, YEAR3, YEAR4, YEAR5, YEAR6, YEAR7, YEAR8, YEAR9, YEAR10, YEAR11, YEAR12, PRIORITY, level, geometry)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, ST_SetSRID(ST_GeomFromText(%s), 4326))
            ON CONFLICT (USE_ID) DO UPDATE SET
                CATCH_TYPE = EXCLUDED.CATCH_TYPE,
                USE_DESC = EXCLUDED.USE_DESC,
                ADD_DATE = EXCLUDED.ADD_DATE,
                KINDERGART = EXCLUDED.KINDERGART,
                YEAR1 = EXCLUDED.YEAR1,
                YEAR2 = EXCLUDED.YEAR2,
                YEAR3 = EXCLUDED.YEAR3,
                YEAR4 = EXCLUDED.YEAR4,
                YEAR5 = EXCLUDED.YEAR5,
                YEAR6 = EXCLUDED.YEAR6,
                YEAR7 = EXCLUDED.YEAR7,
                YEAR8 = EXCLUDED.YEAR8,
                YEAR9 = EXCLUDED.YEAR9,
                YEAR10 = EXCLUDED.YEAR10,
                YEAR11 = EXCLUDED.YEAR11,
                YEAR12 = EXCLUDED.YEAR12,
                PRIORITY = EXCLUDED.PRIORITY,
                level = EXCLUDED.level,
                geometry = EXCLUDED.geometry;
            """
            
            # Ch√®n d·ªØ li·ªáu th√†nh t·ª´ng kh·ªëi l·ªõn ƒë·ªÉ tƒÉng hi·ªáu su·∫•t
            batch_size = 1000
            data_batch = []
            for _, row in gdf.iterrows():
                data_batch.append((
                    row['USE_ID'], row['CATCH_TYPE'], row['USE_DESC'], row['ADD_DATE'],
                    row['KINDERGART'], row['YEAR1'], row['YEAR2'], row['YEAR3'],
                    row['YEAR4'], row['YEAR5'], row['YEAR6'], row['YEAR7'],
                    row['YEAR8'], row['YEAR9'], row['YEAR10'], row['YEAR11'],
                    row['YEAR12'], row['PRIORITY'], row['level'], row['geometry'].wkt
                ))
                
                if len(data_batch) == batch_size:
                    cur.executemany(insert_query, data_batch)
                    data_batch = []
            
            # Ch√®n ph·∫ßn c√≤n l·∫°i n·∫øu c√≤n d·ªØ li·ªáu
            if data_batch:
                cur.executemany(insert_query, data_batch)
            
            conn.commit()
            print("‚úÖ ƒê√£ ch√®n d·ªØ li·ªáu v√†o b·∫£ng 'schools' th√†nh c√¥ng!")
    
    except Exception as e:
        print(f"‚ùå L·ªói khi ch√®n d·ªØ li·ªáu: {e}")
        conn.rollback()

# C·∫•u h√¨nh k·∫øt n·ªëi v·ªõi PostgreSQL
db_config = {
    'user': 'postgres',
    'password': 'Thinh123!',
    'host': 'localhost',
    'port': 5432,
    'database': 'postgres'
}

# K·∫øt n·ªëi v√† x·ª≠ l√Ω d·ªØ li·ªáu
conn = connect()
if conn:
    create_schools_table(conn)
    combined_gdf = read_and_combine_shapefiles()
    insert_data_into_schools(conn, combined_gdf)
    conn.close()
